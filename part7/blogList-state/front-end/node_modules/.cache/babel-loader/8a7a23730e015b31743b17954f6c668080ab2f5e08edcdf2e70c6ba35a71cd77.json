{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport blogServices from \"../services/blogs\";\nconst blog = createSlice({\n  name: \"blog\",\n  initialState: {\n    blogList: [],\n    loading: false,\n    error: null\n  },\n  reducers: {\n    fetchBlogListStart: (state, action) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchBlogListSuccess: (state, action) => {\n      state.loading = false;\n      state.blogList = action.payload;\n    },\n    fetchBlogListFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createBlog(state, action) {\n      state.loading = false;\n      state.blogList = state.blogList.concat(action.payload);\n    },\n    removeBlog(state, action) {\n      state.loading = false;\n      state.blogList = state.blogList.filter(blog => blog.id !== action.payload);\n    },\n    upBlog(state, action) {\n      state.loading = false;\n      state.blogList = state.blogList.map(blog => blog.id !== action.payload.id ? blog : action.payload);\n    }\n  }\n});\nexport const fetchBlogList = () => {\n  return async dispatch => {\n    try {\n      const response = await blogServices.getAll();\n      dispatch(fetchBlogListSuccess(response));\n    } catch (error) {\n      dispatch(fetchBlogListFailure(error.message));\n    }\n  };\n};\nexport const addBlogList = blog => {\n  return async dispatch => {\n    try {\n      const resp = await blogServices.create(blog);\n      dispatch(createBlog(resp));\n    } catch (error) {\n      dispatch(fetchBlogListFailure(error.message));\n    }\n  };\n};\nexport const deleteBlog = id => {\n  return async dispatch => {\n    try {\n      const resp = await blogServices.remove(id);\n      dispatch(removeBlog(id));\n    } catch (error) {\n      dispatch(fetchBlogListFailure(error.message));\n    }\n  };\n};\nexport const updateBlog = (id, blog) => {\n  return async dispatch => {\n    try {\n      const resp = await blogServices.update(id, blog);\n      dispatch(upBlog(resp));\n    } catch (error) {\n      dispatch(fetchBlogListFailure(error.message));\n    }\n  };\n};\nexport const {\n  fetchBlogListStart,\n  fetchBlogListSuccess,\n  fetchBlogListFailure,\n  createBlog,\n  removeBlog,\n  upBlog\n} = blog.actions;\nexport default blog.reducer;","map":{"version":3,"names":["createSlice","blogServices","blog","name","initialState","blogList","loading","error","reducers","fetchBlogListStart","state","action","fetchBlogListSuccess","payload","fetchBlogListFailure","createBlog","concat","removeBlog","filter","id","upBlog","map","fetchBlogList","dispatch","response","getAll","message","addBlogList","resp","create","deleteBlog","remove","updateBlog","update","actions","reducer"],"sources":["/Users/aymaneharkati/Desktop/stack/Full-Stack-Open/part7/blogList-state/front-end/src/reducers/blogRedcuers.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport blogServices from \"../services/blogs\";\n\n\nconst blog = createSlice({\n  name: \"blog\",\n  initialState: {\n    blogList: [],\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    fetchBlogListStart: (state, action) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchBlogListSuccess: (state, action) => {\n      state.loading = false;\n      state.blogList = action.payload;\n    },\n    fetchBlogListFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createBlog(state, action) {\n      state.loading= false;\n        state.blogList = state.blogList.concat(action.payload);\n    },\n    removeBlog(state, action){\n      state.loading = false;\n      state.blogList = state.blogList.filter(blog => blog.id !== action.payload)\n    },\n    upBlog(state, action){\n      state.loading = false;\n      state.blogList = state.blogList.map(blog=> blog.id !== action.payload.id ? blog : action.payload);\n    }\n  },\n  \n});\n\nexport const fetchBlogList = () => {\n  return async (dispatch) => {\n    try {\n      const response = await blogServices.getAll();\n      dispatch(fetchBlogListSuccess(response));\n    } catch (error) {\n      dispatch(fetchBlogListFailure(error.message));\n    }\n  };\n};\n\nexport const addBlogList = (blog) => {\n  return async (dispatch) => {\n    try{\n          const resp = await blogServices.create(blog)\n      dispatch(createBlog(resp))\n    }catch(error){\n      dispatch(fetchBlogListFailure(error.message))\n    }\n  }\n}\nexport const deleteBlog = (id) => {\n  return async (dispatch) => {\n    try{\n      const resp = await blogServices.remove(id)\n      dispatch(removeBlog(id))\n    }catch(error){\n      dispatch(fetchBlogListFailure(error.message))\n    }\n  }\n}\nexport const updateBlog = (id, blog) => {\n  return async (dispatch) => {\n    try{\n      const resp = await blogServices.update(id, blog);\n      dispatch(upBlog(resp))\n    }catch(error){\n      dispatch(fetchBlogListFailure(error.message))\n    }\n  }\n}\n\nexport const {\n  fetchBlogListStart,\n  fetchBlogListSuccess,\n  fetchBlogListFailure,\n  createBlog,\n  removeBlog,\n  upBlog\n} = blog.actions;\n\nexport default blog.reducer;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}